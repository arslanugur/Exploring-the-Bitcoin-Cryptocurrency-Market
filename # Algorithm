# Operations with Data Structures
    1. Traversing
        Visiting each elements of the data structure only once is called traversing.
    2. Searching
        Finding an element in a data structure that satisfies one or more conditions
    3. Access
    
    4. Inserting
        Adding elements of the same type in a data structure is called inserting
    5. Deleting
        Removing an element from a data structure is called deletion
    6. Sorting
        Sorting the elements in a data structure in ascending and descending order is called sorting
    7. Merging
        Merging is the storage of elements located in two different files by combining them into one data file


# Topic Wise Importance
    1. Concepts
        Big O Notations
        Memory
        Logarithm
        Recursion
    
    2. Data Structures
            A DS is way of organizing and holding data in some manner in an efficient way so that it can be accessed, queried or even updated easily and quickly.
        Array
        Linked List
        Stack
        Queue
        Hash Tables
        Trees
        Heaps
        Tries
        Graph


Array Example in C              # a collection of (self-indexed from 0) elements of the same data types are stored contiguous memory locations
----------------------------
#include <stdio.h>

int main()
{
    int arr[] = {1,2,3,4,5};
    printf("%d", arr[3]);
    return 0;
    }
----------------------------
        
        
        
    3. Algorithms           (performs over data structures)
        Sorting algorithm   a set of steps to search
        Searching           a set of steps to sort in some order
        Tree Traversal
        Graph Traversal
        Arrays




# ARRAYS ALGORITHMS
    - Kadane's Algorithm
    - Floyd's Cycle Detection Algorithm
    - KMP Algorithm
    - Quick Select Algorithm
    - Boyer-More Majority Vote Algorithm








# SORTING ALGORITHMS
    In sort algorithms, idea is to arrange the items of a list in a specific order.
    - Insertion Sort
    - Selection Sort
    - Merge Sort
    - Quick Sort
    - Bucket Sort
    - Heap Sort
    - Counting Sort




# Searching & Sorting: order statistics, KMP algo, Rabin Karp, Z's Algo, Aho Corasick String Matching, Manacher's algo



    

# SEARCHING ALGORITHMS
    Find a element in a data set. There are 2 types of search algorithms
    - Linear Search
    - Binary Search           # Method: Divide and Conquer
                for Linear Data Structures
----------------------------
def BinarySearch(lys, val):
    first = 0
    last = len(lys)-1
    index = -1
    while (first <= last) and (index == -1):
        mid = (first+last)//2
        if lys[mid] == val:
            index = mid
        else:
            if val<lys[mid]:
                last = mid -1
            else:
                first = mid +1
    return index

index = BinarySearch([1,2,3,4,5,6,7,8,9,10], 7)
print(index)
----------------------------
    - Depth First Search
                for Graph Data Structures
    - Breath First Search
                for Graph Data Structures








# GRAPH ALGORITHMS
    - Minimum Spanning Tree (Prim's Algorithm)
    - Minimum Spanning Tree (Kruskal's Algorithm)
    - Shortest Path from every vertex to every other vertex (Dijkstra's Algorithm)
    - Shortest Path from source to all vertices (Floyd Warshall Algorithm)
    - Bellman Ford Algorithm
    - Topological Sort Algorithm
    - Flood Fill Algorithm
    - Lee Algorithm
    - Breadth First Search
    - Depth First Search
    - Johnson's Algo
    - Bridges in a graph
    - Articulation Points (or Cut Verticals) in a graph






   
# HASHING ALGORITHMS
    Hashing lookup is currently the most widely used technique to find appropriate data by key or ID. We access data by its index.








# DYNAMIC PROGRAMMING ALGORITHMS
    DP is a method for solving a complex problem by breaking it down into simpler subproblems
    Dynamic programming is an optimization techniques for recursive solutions that have overlapping sub-problem, 
    we use dp to solve a sub-problem, we use dp to solve a sub-problem only sequence
    This type of algo uses memorization technique, it stores the previously calculated result to avoid calculating it again and again
Example: find n-th term of Fibonacci sequence
----------------------------
def fibonacci(n):                       int fibonacci(int n){               // find n-th term of a fibonacci sequence
  dp = [0]*(n+1)                            int dp[n+1] = {0};
  dp[0] = 0                                 dp[0]=0; dp[1]=1;
  dp[1] = 1                                 for(int i = 2; i<n; i++){
  for i in range(2, len(dp)):                   dp[i] = dp[i-1] + dp[i-2];
    dp[i] = dp[i-1] + dp[i-2]               }
  return dp[n]                              return dp[n];
                                        }
----------------------------
    - Longest Common Subsequence
    - Longest Increasing Subsequence
    - Edit Distance
    - Minimum Partition
    - Ways to Cover a Distance
    - Longest Path in Matrix
    - Subset Sum Problem
    - Optimal Strategy for a Game
    - 0-1 Knapsack Problem
    - Assembly Line Scheduling
    







# DIVIDE and CONQUER METHODOLOGY
    A divide-and-conquer algorithm recursively breaks down a problem into two or more sub-problems of the related type, until these become simple enough to be solved directly
    An algorithm that first divides the problem into smaller parts and solve them, then combine to get final solution
    In this algo, a bigger problem is divided into subproblems of same type and solve independently.
    Fİnally the outputs from those subproblems are combined/conquered to give the actual output.
Example: Merge Sort
----------------------------
def merge_sort(arr):
  if len(arr) < 2:
    return arr
  else:
    mid = len(arr) // 2
    left_part = merge_sort(arr[:mid])
    right_part = merge_sort(arr[mid:])
    return join_sorted(left_part, right_part)
----------------------------    

Example: Binary Search
----------------------------
int findNum(int arr[], int key, int 5, int e){
    while(s <= e){
        int mid = (s+e)/2;
        if(arr[mid] == key)
            return mid;
        else if(arr[mid] < key)
            s = mid + 1;
        else
            e = mid - 1;
        }
        return -1;
    }    
----------------------------






# GREEDY ALGORITHMS
    We find a locally optimum solution and hope to find the optimal solution at the global level.
    An algorithm that chooses the most optional move at each step (part by part)
    It always makes the choice that seems to be the best at that moment
    Example: Huffman Coding, Prim's Algorithm
Example: Activity selection problem (Maximum number of activities infinite amount of time)
----------------------------
def max_nb_activities(activities, time_limit):
  activities.sort()
  count = 0
  time = 0
  for activity in activities:
    if (time + activity) > time_limit:
      break
    else:
      count += 1
      time += activity
    return
----------------------------








# BASIC ALGORITHMS
    - Huffman Coding Compression Algorithm
    - Euclid's Algorithm
    - Union Find Algorithm








# RECURSIVE ALGORITHM
    An algorithm that calls itself repeatedly until the problem is solved
    In this algo, a problem is broken into subproblems of the same type and called again and again until the termination condition is reached. 
Example in CPP : To determine the sum of first n natural numbers
----------------------------                    Example: find factorial of given number num
int fact(int n)                                 int factorial(int num){             // find factorial of given number num
{                                                   if(n==0){
  if (n <= 1) // base case                              return 1;
    return 1;                                       }
  else                                              return n * factorial(n-1);
    return n * fact(n-1);                       }
}
----------------------------








# BRUTE-FORCE ALGORITHM
    An algorithm that tries every possibilities available to solve a problem
    This is the basic and most simplest type of algo.
Example: Native Algorithm to find a pair sums up to k (tries every possible layer)
----------------------------
def find_pair(arr, k):
  for i in range(len(arr)):
    for j in range(i+1, len(arr)):
      if (arr[i]+arr[j]) == k:
        return (i, j)
  return(-1, -1)
----------------------------

Example: Linear Search in C++
----------------------------
// return the index given key in the array of size n
int findNum(int arr[], int n, int key){
    for(int i = 0; i<n; i++){
        if(arr[i] == key){
            return i;
        }
    }    
    return -1;
}        
----------------------------








# BACKTRACKING ALGORITHM
    An algorithm that tries all the possible candidate solutions using recursive method and goes back as soon as it's defects that the actual candidate can't be valid
    and if solutions fails to satisfy its constraints then it returns to previous step and tries to explore other solutions.
    This algo prunes the recursion tree as per the need and strongly relies upon DO and UNDO transformation of the states. 
    Example: Rat in a maze, N queen problem
Example: Count subsets that sum up to k
----------------------------
def subsets_k(arr, k, i = 0)
  if k == 0:
    return 1 # valid candidate
  elif k < 0 or i == len(arr):
    return 0 # invalid candidate
  else:
    return subsets_k(arr[i], i+1) + subsets_k(arr, k, i+1)
----------------------------




# DATA STRUCTURES ALGORITHMS
    - Binary Indexed Tree or Fenwick Tree
    - Tries
    - Suffix Array
    - Sparse Table
    - Suffix Automata
    - LCA and RMQ
    - Segment Tree (RMQ, Range Sum and Lazy Propagation)
    - K-D Tree (See Insert, Mınimum and Delete)
    - Union Find Disjoint Set



-- Number Theory and Other Mathematical Algorithms
# PRIME NUMBERS and PRIME FACTORIZATION ALGORITHMS
    - Sieve of Eratosthenes
    - Segmented Sieve
    - Wilson's Theorem
    - Prime Factorization
    - Pollard's Rho Algorithm
    
# MODULO ARITHMETIC ALGORITHMS
    - Basic and Extended Euclidean Algorithms
    - Euler's Totient Function
    - Modular Exponentiation
    - Modular Multiplicative Inverse
    - Chinese Remainder Theorem Introduction
    - Chinese Remainder Theorem
    - Modulo Inverse Implementation

# GEOMETRICAL and NETWORK FLOW ALGORITHMS
    - Convex Hull
    - Graham Scan
    - Line Intersection
    - Interval Tree
    - Matrix Exponentiation 
    - Maxflow Ford Furkerson Algorithm
    - Edmond Karp Implementation
    - Stable Marriage Problem
    - Hopcropt-Karp Algorithm for Maximum Matching
    - Dinic's Algorithm and E-Maxx





What is an Algorithm?
  An algorithm is a set of step-by-step procedures, or a set of rules to follow, for completing a specific task or solving a particular problem.
  The word algorithm was first coined in the 9th century
  
  Algorithmic programming is all about writing a set of rules with a finite number of steps that instruct the computer how to perform a task
  A computer program is essentially an algorithm that tells the computer what specific steps to execute, in what specific order, in order to carry out a specific task
  
  Types of Algorithms
    - Divide and Conquer Algorithms
    - Brute Fore Algorithms
    - Randomized Algorithms
    - Greedy Algorithms
    - Recursive Algorithms
    - Backtracking Algorithms
    - Dynamic Programming Algorithms
    
    Why are Algorithms Important to Understand?
      Algorithmic thinking allows students to break down problems and conceptualize solutions in terms of discrete steps
      

ARRAYS
Arrays are defined as the collection of elements of same data type
Array is the simpliest data structure where each data element can be randonly accessed by using its index number

--Array declaration in C language
Data_type array_name[size]
eg: int arr[10]

Array Memory representation
      0  1  2  3  --> index
      5 10 15 20  --> value
      
--Properties of Array
1. Each element is of same data type and carries a same size i.e. int = 4 bytes.
2. Elements of the array are stored at contiguous memory locations.
3. Elements of the array can be randomly accessed.

--Array Use Case
If we want to store price of 4 different pens
we use variables to store price like this
    price1 = 10
    price2 = 14
    price3 = 5
    price4 = 3
    
we could simply use an array to store these values
    int pen_price[10, 14, 5, 3]
If we want to access an element from this array, we could use its index number.

For example we can access the value "5" by using its index number "2" like this
    print(pen_price[2]) 

Example: to find out the output
    int mark1[10]
    int mark2[14]
    mark2 = [8, 25, 789, 4, 2, 7, 8, 9, 45, 78]
    mark1 = [1, 0, 2, 45, 85, 5, 8, 0]
    print(mark2[5])   # 7
    
TWO DIMENSIONAL ARRAY
Array of Arrays are called 2D array
The 2D array is organized as matrices which can be represented as the collection of rows amnd columns

2D Array declaration in C language
Data_type array_name[rows][columns]
eg: int arr[3][3]

2D Array representation(a[3][3])

      a[0][0]   a[0][1]   a[0][2]
